<?php

/**
 * @file
 * Module installation file.
 */

use Drupal\node\NodeInterface;
use Drupal\pathauto\PathautoState;

/**
 * Implements hook_install().
 */
function openy_google_search_install() {

  $alias = '/search';
  /** @var \Drupal\Core\Path\AliasStorageInterface $path_alias_storage */
  $path_alias_storage = \Drupal::service('path.alias_storage');
  if ($path_alias_storage->aliasExists($alias, 'en')) {
    return;
  }
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  if (!$module_installer->install(['openy_prgf_google_search'])) {
    return;
  }
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  $search_paragraph = $paragraph_storage->create([
    'type' => 'google_search',
    'field_prgf_block' => [
      [
        'plugin_id' => 'google_search_block',
        'plugin_configuration' => [
          'id' => 'google_search_block',
          'label' => 'Google search',
          'provider' => 'openy_google_search',
          'label_display' => 'hidden',
        ],
      ],
    ],
  ]);
  if (!$search_paragraph->save()) {
    return;
  }
  // Fix broken block plugin id.
  $tables = [
    'paragraph__field_prgf_block',
    'paragraph_revision__field_prgf_block',
  ];
  foreach ($tables as $table) {
    if (!\Drupal::database()->schema()->tableExists($table)) {
      continue;
    }
    // Select google_search paragraphs that have "broken" as plugin_id.
    $query = \Drupal::database()->select($table, 'ptable');
    $query->fields('ptable');
    $query->condition('ptable.field_prgf_block_plugin_id', 'broken');
    $query->condition('ptable.bundle', 'google_search');
    $broken_paragraphs = $query->execute()->fetchAll();
    foreach ($broken_paragraphs as $paragraph) {
      $data = unserialize($paragraph->field_prgf_block_plugin_configuration);
      $query = \Drupal::database()->update($table);
      $query->fields([
        'field_prgf_block_plugin_id' => $data['id'],
      ]);
      $query->condition('bundle', $paragraph->bundle);
      $query->condition('entity_id', $paragraph->entity_id);
      $query->condition('revision_id', $paragraph->revision_id);
      $query->condition('langcode', $paragraph->langcode);
      $query->execute();
    }
  }

  $page = $node_storage->create([
    'type' => 'landing_page',
    'title' => 'Search results',
    'field_lp_layout' => 'one_column',
    'langcode' => 'en',
    'uid' => '1',
    'field_content' => [
      [
        'target_id' => $search_paragraph->id(),
        'target_revision_id' => $search_paragraph->getRevisionId(),
      ],
    ],
    'status' => NodeInterface::PUBLISHED,
    'path' => [
      'pathauto' => PathautoState::SKIP,
      'alias' => $alias,
    ],
  ]);
  if ($page->save()) {
    \Drupal::configFactory()->getEditable('openy_google_search.settings')->set('search_page_id', $page->id())->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function openy_google_search_uninstall() {
  if ($nid = \Drupal::configFactory()->get('openy_google_search.settings')->get('search_page_id')) {
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    if ($node = $node_storage->load($nid)) {
      $node->delete();
    }
  }
}
