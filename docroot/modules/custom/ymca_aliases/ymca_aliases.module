<?php
/**
 * @file
 * Module file.
 */

/**
 * Implements hook_entity_insert().
 */
function ymca_aliases_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  // Proceed only with nodes.
  if (!($entity instanceof \Drupal\node\NodeInterface)) {
    return;
  }
  // Don't proceed with articles, since their alias requires menu link updated.
  if ($entity->bundle() == 'article') {
    return;
  }
  // Generate alias.
  if (!$alias = Drupal::service('ymca_aliases.node_alias')->getAlias($entity)) {
    return;
  }
  // Save generated alias.
  \Drupal::service('path.alias_storage')->save('/node/' . $entity->id(), $alias, 'en');
}

/**
 * Implements hook_entity_update().
 */
function ymca_aliases_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Proceed only with nodes.
  if (!($entity instanceof \Drupal\node\NodeInterface)) {
    return;
  }
  // Don't proceed with articles, since their alias requires menu link updated.
  if ($entity->bundle() == 'article') {
    return;
  }
  // Generate alias.
  if (!$alias = Drupal::service('ymca_aliases.node_alias')->getAlias($entity)) {
    return;
  }
  $source = '/node/' . $entity->id();
  // Check whether we need to update an alias.
  $existing = Drupal::service('path.alias_storage')->load(['source' => $source]);
  $pid = !empty($existing['pid']) ? $existing['pid'] : NULL;
  // Save generated alias.
  \Drupal::service('path.alias_storage')->save($source, $alias, 'en', $pid);
}
