<?php

/**
 * @file
 * Module for hook_update_N.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Database\Database;

/**
 * Protecting sites with a shield.
 */
function ymca_master_update_8001() {
  \Drupal::service('module_installer')->install(array('shield'), TRUE);
}

/**
 * Remove 'field_exclude_from_navigation' field from 'Page' content type.
 */
function ymca_master_update_8002() {
  $field_config = FieldConfig::loadByName('node', 'article', 'field_exclude_from_navigation');

  $field_storage = $field_config->getFieldStorageDefinition();
  $bundles = \Drupal::entityManager()->getBundleInfo($field_config->getTargetEntityTypeId());
  $bundle_label = $bundles[$field_config->getTargetBundle()]['label'];

  if ($field_storage && !$field_storage->isLocked()) {
    $field_config->delete();
    \Drupal::logger('ymca_master')->info('The field %field has been deleted from the %type content type.', array('%field' => $field_config->label(), '%type' => $bundle_label));
  }
  else {
    \Drupal::logger('ymca_master')->error('There was a problem removing the %field from the %type content type.', array('%field' => $field_config->label(), '%type' => $bundle_label));
  }

  // Fields are purged on cron.
  field_purge_batch(10);
}

/**
 * Set appropriate node aliases for news pages.
 */
function ymca_master_update_8003() {
  // @todo run this after next reimport from ClockWork source DB.
  $news_term_id = \Drupal::entityQuery('taxonomy_term')
    ->condition('name', 'News')
    ->condition('vid', 'tags')
    ->execute();
  $term_id = (int) array_shift($news_term_id);

  $news_node_ids = \Drupal::entityQuery('node')
    ->condition('type', 'blog')
    ->condition('field_tags', $term_id)
    ->execute();

  foreach (array_values($news_node_ids) as $id) {
    $sources[] = '/node/' . $id;
  }

  $aliases_to_change = db_select('url_alias', 'ua')
    ->fields('ua', ['source', 'alias'])
    ->condition('ua.source', $sources, 'IN')
    ->execute()
    ->fetchAllAssoc('source');

  foreach ($aliases_to_change as $item) {
    preg_match("/\/blog\/([0-9]{4})\/([0-9]{1,2})\/([0-9]{1,2})\/([0-9]{1,4})\/(.*)/", $item->alias, $match);
    if (count($match) != 6) {
      continue;
    }
    if (strlen($match[2]) == 1) {
      $match[2] = '0' . $match[2];
    }
    if (strlen($match[3]) == 1) {
      $match[3] = '0' . $match[3];
    }
    $new_alias = '/news/' . $match[1] . '/' . $match[2] . '/' . $match[3] . '/' . $match[4] . '/' . $match[5];

    db_update('url_alias')
      ->fields(array('alias' => $new_alias))
      ->condition('source', $item->source)
      ->execute();

  }

}

/**
 * Install ymca_personify module.
 */
function ymca_master_update_8004() {
  \Drupal::service('module_installer')->install(array('ymca_personify'), TRUE);
}

/**
 * Configure menu items for personify.
 */
function ymca_master_update_8005() {
  // Remove Sign In old link.
  /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */
  $storage = \Drupal::getContainer()->get('entity.manager')->getStorage('menu_link_content');
  $entity = $storage->load(210);
  $entity->delete();
}

/**
 * Update config of ymca_groupex module.
 */
function ymca_master_update_8006() {
  \Drupal::service('module_installer')->uninstall(array('ymca_groupex'));
  \Drupal::service('module_installer')->install(array('ymca_groupex'), TRUE);
}

/**
 * Install ymca_search_alter module.
 */
function ymca_master_update_8007() {
  \Drupal::service('module_installer')->install(array('ymca_search_alter'), TRUE);
}

/**
 * Enable config of ymca_frontend module.
 */
function ymca_master_update_8008() {
  \Drupal::service('module_installer')->uninstall(array('ymca_frontend'));
  \Drupal::service('module_installer')->install(array('ymca_frontend'), TRUE);
}

/**
 * Fix token replacements.
 */
function ymca_master_update_8009() {
  $fields = [
    'field_content',
    'field_lead_description',
    'field_sidebar',
    'field_summary',
  ];

  // Get all nodes with non-replaced tokens.
  $ids = [];
  foreach ($fields as $field) {
    $query = db_select(sprintf('node__%s', $field), 'c')
      ->fields('c', ['entity_id']);

    $or = db_or();
    $or->condition(sprintf('%s_value', $field), '%' . db_like('{{internal_asset_link') . '%', 'LIKE');
    $or->condition(sprintf('%s_value', $field), '%' . db_like('{{internal_page_link') . '%', 'LIKE');

    $query->condition($or);

    $ids += $query->execute()->fetchAllKeyed(0, 0);
  }

  $service = Drupal::service('ymcareplacetokens.service');

  // Replace tokens withing the nodes and fields.
  foreach ($ids as $nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    foreach ($fields as $field) {
      if ($node->hasField($field)) {
        foreach ($node->$field as &$item) {
          try {
            $item->set('value', $service->processText($item->value));
          }
          catch (Exception $e) {
            // Set unprocessed value and log an error.
            $item->set('value', $item->value);
            \Drupal::logger('ymca_master')
              ->error(
                'Replacement tokens error: %message',
                ['%message' => $e->getMessage()]
              );
          }
        }
      }
    }

    $node->save();
  }
}

/**
 * Enable ymca_activity_finder module.
 */
function ymca_master_update_8010() {
  \Drupal::service('module_installer')->install(['ymca_activity_finder'], TRUE);
}

/**
 * Enable config_import module.
 */
function ymca_master_update_8011() {
  \Drupal::service('module_installer')->install(['config_import'], TRUE);
}

/**
 * Recreate schedules blocks.
 */
function ymca_master_update_8012() {
  module_load_include('php', 'ymca_master', 'include/ymca_master.8011');
  $blocks = _ymca_master_schedules_block_data();
  foreach ($blocks as $block_data) {
    $block = BlockContent::create($block_data)->enforceIsNew();
    $block->save();
  }

  // Re-import configs.
  \Drupal::service('config_import.importer')->importConfigs([
    'sites/default/config/staging/block.block.schedulesrightblocks.yml',
    'sites/default/config/staging/block.block.allyschedulesformtitle.yml',
    'sites/default/config/staging/block.block.allyschedulesleadleft.yml',
    'sites/default/config/staging/block.block.allyschedulesleadright.yml',
  ]);
}

/**
 * Add aliases for groupex search results.
 */
function ymca_master_update_8013() {
  $query = db_select('url_alias', 'a')
    ->fields('a')
    ->condition('source', '/node/%/schedules', 'LIKE')
    ->execute();

  while ($row = $query->fetchObject()) {
    // Create new alias here.
    $suffix = 'group_exercise_search_results';
    $source = $row->source . '/' . $suffix;
    $alias = $row->alias . '/' . $suffix;
    \Drupal::service('path.alias_storage')->save($source, $alias, 'en');
  }
}

/**
 * Enable modules.
 */
function ymca_master_update_8014() {
  $modules = [
    'ymca_aliases',
    'ymca_blog_listing',
    'ymca_breadcrumb',
  ];
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Remove all Camp-related 'News & Events' nodes.
 */
function ymca_master_update_8015() {
  // Camps.
  $camp_ids = \Drupal::entityQuery('node')
    ->condition('type', 'camp')
    ->execute();

  // Create aliases for News & Events pages of existing Camps.
  $suffix = '/about/news__events';
  foreach ($camp_ids as $id) {
    $camp_path = '/node/' . $id;
    $news_events_path = $camp_path . $suffix;
    $camp_path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($camp_path);
    $news_events_path_alias = $camp_path_alias . $suffix;
    \Drupal::service('path.alias_storage')->save($news_events_path, $news_events_path_alias, 'en');
  }

  // Camp-related 'News & Events' nodes.
  $nids = \Drupal::entityQuery('node')
    ->condition('title', 'News & Events')
    ->condition('field_related.target_id', $camp_ids, 'IN')
    ->execute();

  // Remove nodes.
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes = $storage->loadMultiple($nids);
  $storage->delete($nodes);
}

/**
 * Test PUSH_MIGRATE_UPDATE_TO_PROD job.
 */
function ymca_master_update_8016() {
  $env = 'default';
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    $env = 'Acquia';
  }
  \Drupal::logger('ymca_master')
    ->info('Hello! Current environment is: %env.', ['%env' => $env]);
}

/**
 * Fix menu_link_content links.
 *
 * Current architecture implies running the migration of menu_link_content
 * entities before the pages migration. So, menu_link_content entities
 * do not know anything about node ids. That's why this code should be run after
 * the migration of the second dump.
 */
function ymca_master_update_8017() {
  module_load_include('php', 'ymca_master', 'include/helper');
  ymca_fix_menu_link_content();
}

/**
 * Enable Membership block by default.
 */
function ymca_master_update_8018() {
  $map = [
    'node__field_membership_block' => 'field_membership_block_value',
    'node_revision__field_membership_block' => 'field_membership_block_value',
    'node__field_include_general_blog_posts' => 'field_include_general_blog_posts_value',
    'node_revision__field_include_general_blog_posts' => 'field_include_general_blog_posts_value',
  ];
  foreach ($map as $table => $column) {
    db_update($table)
      ->fields(array($column => 1))
      ->execute();
  }
}

/**
 * Update camp migrations.
 */
function ymca_master_update_8019() {
  module_load_include('php', 'ymca_master', 'include/helper');

  $ignore = Drupal::config('ymca_migrate.settings')->get('ignore');

  // We should remove all blocks created by previous before running migration update.
  $remove = [
    'date_block',
    'expander_block',
    'image_block',
    'promo_block',
    'slide_show',
    'slide_show_item',
  ];

  $ids = \Drupal::entityQuery('block_content')
    ->condition('type', $remove, 'IN')
    ->condition('id', $ignore['block_content'], 'NOT IN')
    ->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('block_content');
  $blocks = $storage->loadMultiple($ids);
  $storage->delete($blocks);

  // Run migrations update.
  ymca_run_migration('ymca_migrate_node_blog', TRUE, TRUE);
  ymca_run_migration('ymca_migrate_node_camp', TRUE, TRUE);
  ymca_run_migration('ymca_migrate_node_location', TRUE, TRUE);
  ymca_run_migration('ymca_migrate_node_page', TRUE, TRUE);

  // Run some content fixes.
  ymca_master_update_8015();
  ymca_master_update_8017();
  ymca_master_update_8018();
}

/**
 * Fix trailing slashes issue.
 */
function ymca_master_update_8020() {
  $db = Database::getConnection();
  $query = $db->select('url_alias', 'ua')
    ->fields('ua', ['source', 'alias'])
    ->execute();

  $repo = \Drupal::service('redirect.repository');

  while ($alias = $query->fetchObject()) {
    if (substr($alias->alias, -1, 1) !== '/') {
      $source_path = ltrim($alias->alias . '/', '/');
      try {
        if (!$repo->findMatchingRedirect($source_path, [], 'en')) {
          $redirect = \Drupal\redirect\Entity\Redirect::create();
          $redirect->setSource($source_path);
          $redirect->setRedirect($alias->source);
          $redirect->setLanguage('en');
          $redirect->setStatusCode(\Drupal::config('redirect.settings')->get('default_status_code'));
          $redirect->save();
        }
      }
      catch (\Drupal\redirect\Exception\RedirectLoopException $e) {
        watchdog_exception('ymca_master', $e);
      }
    }
  }
}

/**
 * Fix trailing slashes for old redirects.
 */
function ymca_master_update_8021() {
  $db = Database::getConnection();
  $query = $db->select('redirect', 'r')
    ->fields('r', [
      'redirect_source__path',
      'redirect_redirect__uri',
    ])
    ->condition('r.redirect_redirect__uri', $db->escapeLike('internal:') . '%', 'LIKE')
    ->condition('r.redirect_source__path', '%' . $db->escapeLike('/'), 'NOT LIKE')
    ->execute();

  $repo = \Drupal::service('redirect.repository');
  $alias_manager = \Drupal::service('path.alias_manager');

  while ($old = $query->fetchObject()) {
    $uri = $old->redirect_redirect__uri;
    $source_path = $old->redirect_source__path . '/';
    if ($destination = $alias_manager->getPathByAlias(str_replace('internal:', '', $uri), 'en')) {
      try {
        if (!$repo->findMatchingRedirect($source_path, [], 'en')) {
          $redirect = \Drupal\redirect\Entity\Redirect::create();
          $redirect->setSource($source_path);
          $redirect->setRedirect($destination);
          $redirect->setLanguage('en');
          $redirect->setStatusCode(\Drupal::config('redirect.settings')->get('default_status_code'));
          $redirect->save();
        }
      }
      catch (\Drupal\redirect\Exception\RedirectLoopException $e) {
        watchdog_exception('ymca_master', $e);
      }
    }
  }
}

/**
 * Fix redundant configs.
 */
function ymca_master_update_8022() {
  Drupal::configFactory()->getEditable('stage_file_proxy.settings')->delete();
  Drupal::configFactory()->getEditable('devel.settings')->delete();
}

/**
 * Enable YMCA Membership module.
 */
function ymca_master_update_8023() {
  \Drupal::service('module_installer')->install(array('ymca_membership'), TRUE);
}

/**
 * Run files migration.
 */
function ymca_master_update_8024() {
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    ini_set('memory_limit', '2048M');
    $dir = DRUPAL_ROOT . '/' . \Drupal\Core\StreamWrapper\PublicStream::basePath() . '/cache';
    $config = \Drupal::service('config.factory')->getEditable('ymca_migrate.settings');
    $config->set('cache_dir', $dir);
    $config->save();
  }

  module_load_include('php', 'ymca_master', 'include/helper');
  ymca_run_migration('ymca_migrate_file_image', TRUE, TRUE);
}

/**
 * Run migration for 2nd dump.
 */
function ymca_master_update_8025() {
  module_load_include('php', 'ymca_master', 'include/helper');

  $ignore = Drupal::config('ymca_migrate.settings')->get('ignore');

  // We should remove all blocks created by previous before running migration update.
  $remove = [
    'date_block',
    'expander_block',
    'image_block',
    'promo_block',
    'slide_show',
    'slide_show_item',
  ];

  $ids = \Drupal::entityQuery('block_content')
    ->condition('type', $remove, 'IN')
    ->condition('id', $ignore['block_content'], 'NOT IN')
    ->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('block_content');
  $blocks = $storage->loadMultiple($ids);
  $storage->delete($blocks);

  // Run migrations update.
  $migrations = [
    'ymca_migrate_block_content_code_block',
    'ymca_migrate_menu_link_content_main',
    'ymca_migrate_menu_link_content_camps',
    'ymca_migrate_menu_link_content_child_care_preschool',
    'ymca_migrate_menu_link_content_health_fitness',
    'ymca_migrate_menu_link_content_jobs_suppliers_news',
    'ymca_migrate_menu_link_content_kid_teen_activities',
    'ymca_migrate_menu_link_content_locations',
    'ymca_migrate_menu_link_content_swimming',
    'ymca_migrate_menu_link_content_our_cause',
    'ymca_migrate_menu_link_content_redirect',
    'ymca_migrate_node_blog',
    'ymca_migrate_node_page',
    'ymca_migrate_node_camp',
    'ymca_migrate_node_location',
    'ymca_migrate_node_location_schedule',
    'ymca_migrate_redirect',
    'ymca_migrate_url_alias_page',
    'ymca_migrate_url_alias_blog',
    'ymca_migrate_url_alias_camp',
    'ymca_migrate_url_alias_location',
    'ymca_migrate_url_alias_location_schedule',
    'ymca_migrate_taxonomy_term_tags',
    'ymca_migrate_url_alias_tags',
  ];

  foreach ($migrations as $item) {
    ymca_run_migration($item, TRUE, TRUE);
  }

  // Run some content fixes.
  ymca_master_update_8015();
  ymca_master_update_8017();
  ymca_master_update_8018();
  ymca_master_update_8020();
  ymca_master_update_8021();
}

/**
 * Update location titles.
 */
function ymca_master_update_8026() {
  $mappings = \Drupal::config('ymca_groupex.mapping')->get('locations');
  foreach ($mappings as $item) {
    if ($node = \Drupal\node\Entity\Node::load($item['entity_id'])) {
      $node->setTitle($item['name']);
      $node->save();
    }
  }
}

/**
 * Fix non-replaced tokens.
 */
function ymca_master_update_8027() {
  module_load_include('php', 'ymca_master', 'include/helper');

  $db = Database::getConnection('default');
  $config = \Drupal::service('config.factory')->getEditable('redirect.settings');
  $validator = \Drupal::pathValidator();

  // Do not process redirects on save.
  $config->set('auto_redirect', FALSE);
  $config->save();

  $tables = [
    'block_content__field_block_content',
    'node__field_camp_links',
    'node__field_content',
    'node__field_secondary_sidebar',
    'node__field_sidebar',
    'node__field_summary',
  ];

  $problems = [];
  foreach ($tables as $table) {
    list($entity_type, $field) = explode('__', $table);
    $col = $field . '_value';
    $stmt = $db->select($table, 't')
      ->fields('t')
      ->condition('t.' . $col, '%' . $db->escapeLike('{{internal_page_link_') . '%', 'LIKE')
      ->execute();

    while ($data = $stmt->fetchObject()) {
      $problems[$entity_type][$data->entity_id][] = $field;
    }
  }

  // We've identified problem. Let's process them.
  foreach ($problems as $entity_type => $entities) {
    $storage = \Drupal::getContainer()->get('entity.manager')->getStorage($entity_type);
    foreach ($entities as $entity_id => $fields) {
      /** @var \Drupal\Core\Entity\Entity $entity */
      $entity = $storage->load($entity_id);
      $processed_fields = [];

      foreach ($fields as $field) {
        $replace = FALSE;

        $original = $entity->$field->value;
        preg_match_all('/{{internal_page_link_(\d+)}}/miU', $original, $test);
        if (!empty($test[1])) {
          foreach ($test[1] as $id => $token) {
            // Check each token. If the destination is valid. Add to replace array.
            if ($address = ymca_get_legacy_page_address($token)) {
              if ($validator->isValid($address)) {
                $replace['tokens'][$token] = $test[0][$id];
                $replace['links'][$token] = $address;
              }
            }
          }
        }

        if ($replace) {
          $processed_fields[$field] = str_replace($replace['tokens'], $replace['links'], $original);
        }
      }

      // Finally, save entity with processed fields.
      foreach ($processed_fields as $field_name => $new_value) {
        $entity->set($field_name, $new_value);
        $entity->save();

        \Drupal::logger('ymca_migrate')->info(
          'Tokens have been successfully replaced in !entity_type:!entity_id.',
          [
            '!entity_type' => $entity_type,
            '!entity_id' => $entity_id,
          ]
        );
      }
    }
  }

  // Restore Redirect settings.
  $config->set('auto_redirect', TRUE);
  $config->save();
}
