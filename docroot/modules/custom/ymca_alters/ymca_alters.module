<?php

/**
 * @file
 * Contains ymca_alters.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

define('MEMBERSHIP_BLOCK_ID', '1136');

/**
 * Implements hook_help().
 */
function ymca_alters_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ymca_alters module.
    case 'help.page.ymca_alters':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Performs specific alters of default Drupal behavior') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function ymca_alters_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Rename 'Save and Publish' button everywhere.
  $bundles = ['article', 'camp', 'location', 'blog'];
  foreach ($bundles as $bundle) {
    if (
      $form_id == sprintf('node_%s_edit_form', $bundle) ||
      $form_id == sprintf('node_%s_form', $bundle)) {
      $form['actions']['publish']['#value'] = t('Save');
    }
  }

  // Adjust header image/button for pages.
  if (in_array($form_id, ['node_article_form', 'node_article_edit_form'])) {
    $form['field_header_image']['#states'] = [
      'visible' => [
        ':input[name="field_header_variant"]' => [
          ['value' => 'image'],
          ['value' => 'slideshow'],
        ],
      ],
    ];
    $form['field_header_button']['#states'] = [
      'visible' => [
        ':input[name="field_header_variant"]' => [
          ['value' => 'button'],
          ['value' => 'slideshow'],
        ],
      ],
    ];
  }

  // Add membership block edit link.
  if ($form_id == 'node_location_edit_form') {
    $edit_link_url = Url::fromUri('internal:/block/' . MEMBERSHIP_BLOCK_ID);
    $edit_link_url->setOption('attributes', array('target' => '_blank'));
    /* @var Link $edit_link */
    $edit_link = new Link('Edit Membership block', $edit_link_url);
    $link = $edit_link->toRenderable();
    $form['field_membership_block']['#suffix'] = render($link);
  }
  if ($form_id == 'entity_embed_dialog') {
    if ($form['attributes']['data-embed-button']['#value'] == 'menu_link') {
      $storage = $form_state->getStorage();
      $form['attributes']['data-button'] = array(
        '#title' => t('Use button style'),
        '#type' => 'checkbox',
        '#default_value' => !isset($storage['entity_element']['data-button']) ? 0 : $storage['entity_element']['data-button'],
        '#wrapper_attributes' => array('class' => array('container-inline')),
        '#attributes' => array('class' => array('container-inline')),
        '#parents' => array('attributes', 'data-button'),
      );
      $form_state->setRebuild();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ymca_alters_block_content_presave(EntityInterface $entity) {
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $ty */
  $ty = $entity->get('type');
  if (!isset($ty)) {
    return;
  }
  $type = $ty->getValue()[0]['target_id'];
  if ($type != 'alert_block') {
    return;
  }
  if (!$entity->hasField('field_global_alert')) {
    return;
  }
  $global = $entity->get('field_global_alert');
  $global_val = $global->getValue()[0]['value'];
  if ($global_val != 1) {
    // Prevents from saving loop.
    return;
  }
  $query = \Drupal::entityQuery('block_content')
    ->condition('type', 'alert_block')
    ->condition('field_global_alert', 1)
    ->execute();

  $blocks = \Drupal::entityManager()->getStorage('block_content')->loadMultiple(array_keys($query));
  /** @var \Drupal\block_content\Entity\BlockContent $block */
  foreach ($blocks as $block) {
    if ($block->uuid() == $entity->uuid()) {
      // All pages with an updated block should get cache invalidated.
      \Drupal::service('cache_tags.invalidator')->invalidateTags(['block_content:' . $block->id()]);
      // No need to change itself.
      continue;
    }
    // Unset all other alert blocks.
    $block->set('field_global_alert', 0);
    $block->save();
    // All pages with an old block should get cache invalidated.
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['block_content:' . $block->id()]);
  }
  // We should invalidate all rendered cache, because block was changed/created.
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['rendered']);
}

/**
 * Implements hook_entity_presave().
 */
function ymca_alters_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    if ($entity->bundle() == 'blog') {
      Drupal::service('ymca_alters.list_cache_invalidator')->invalidate($entity);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function ymca_alters_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node') {
    if ($entity->bundle() == 'blog') {
      Drupal::service('ymca_alters.list_cache_invalidator')->invalidate($entity);
    }
  }
}
