<?php

/**
 * @file
 * Contains ymca_alters.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\ymca_groupex\GroupexScheduleFetcher;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function ymca_alters_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ymca_alters module.
    case 'help.page.ymca_alters':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Performs specific alters of default Drupal behavior') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function ymca_alters_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Rename 'Save and Publish' button everywhere.
  $bundles = ['article', 'camp', 'location', 'blog'];
  foreach ($bundles as $bundle) {
    if (
      $form_id == sprintf('node_%s_edit_form', $bundle) ||
      $form_id == sprintf('node_%s_form', $bundle)) {
      $form['actions']['publish']['#value'] = t('Save');
    }
  }

  // Adjust header image/button for pages.
  if (in_array($form_id, ['node_article_form', 'node_article_edit_form'])) {
    $form['field_header_image']['#states'] = [
      'visible' => [
        ':input[name="field_header_variant"]' => [
          ['value' => 'image'],
          ['value' => 'slideshow'],
        ],
      ],
    ];
    $form['field_header_button']['#states'] = [
      'visible' => [
        ':input[name="field_header_variant"]' => [
          ['value' => 'button'],
          ['value' => 'slideshow'],
        ],
      ],
    ];
  }

  // Add membership block edit link.
  if ($form_id == 'node_location_edit_form' || $form_id == 'node_location_form') {
    $membership_block_id = \Drupal::config('ymca_alters.config')->get('membership_block_id');
    $edit_link_url = Url::fromUri('internal:/block/' . $membership_block_id);
    $edit_link_url->setOption('attributes', array('target' => '_blank'));
    /* @var Link $edit_link */
    $edit_link = new Link('Edit Membership block', $edit_link_url);
    $link = $edit_link->toRenderable();
    $form['field_membership_block']['#suffix'] = render($link);
  }
  if ($form_id == 'entity_embed_dialog') {
    if (empty($form['attributes']['data-embed-button'])) {
      return;
    }
    if ($form['attributes']['data-embed-button']['#value'] == 'menu_link') {
      $storage = $form_state->getStorage();
      $form['attributes']['data-button'] = array(
        '#title' => t('Use button style'),
        '#type' => 'checkbox',
        '#default_value' => !isset($storage['entity_element']['data-button']) ? 0 : $storage['entity_element']['data-button'],
        '#wrapper_attributes' => array('class' => array('container-inline')),
        '#attributes' => array('class' => array('container-inline')),
        '#parents' => array('attributes', 'data-button'),
      );
      $form_state->setRebuild();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ymca_alters_block_content_presave(EntityInterface $entity) {
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $ty */
  $ty = $entity->get('type');
  if (!isset($ty)) {
    return;
  }
  $type = $ty->getValue()[0]['target_id'];
  if ($type != 'alert_block') {
    return;
  }
  if (!$entity->hasField('field_global_alert')) {
    return;
  }
  $global = $entity->get('field_global_alert');
  $global_val = $global->getValue()[0]['value'];
  if ($global_val != 1) {
    // Prevents from saving loop.
    return;
  }
  $query = \Drupal::entityQuery('block_content')
    ->condition('type', 'alert_block')
    ->condition('field_global_alert', 1)
    ->execute();

  $blocks = \Drupal::entityManager()->getStorage('block_content')->loadMultiple(array_keys($query));
  /** @var \Drupal\block_content\Entity\BlockContent $block */
  foreach ($blocks as $block) {
    if ($block->uuid() == $entity->uuid()) {
      // All pages with an updated block should get cache invalidated.
      \Drupal::service('cache_tags.invalidator')->invalidateTags(['block_content:' . $block->id()]);
      // No need to change itself.
      continue;
    }
    // Unset all other alert blocks.
    $block->set('field_global_alert', 0);
    $block->save();
    // All pages with an old block should get cache invalidated.
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['block_content:' . $block->id()]);
  }
  // We should invalidate all rendered cache, because block was changed/created.
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['rendered']);
}

/**
 * Implements hook_sitemap_links_alter().
 */
function ymca_alters_sitemap_links_alter(array &$sitemap_links) {
  /** @var array $skip */
  $skip = \Drupal::config('ymca_alters.config')->get('sitemap_xml_skip_uris');
  if (empty($skip)) {
    return;
  }
  else {
    foreach ($skip as &$item) {
      $item = $GLOBALS['base_url'] . $item;
    }
  }
  foreach ($sitemap_links as $id => $link) {
    foreach ($link['urls'] as $lang => $url) {
      if (in_array($url, array_values($skip))) {
        unset($sitemap_links[$id]['urls'][$lang]);
        if (empty($sitemap_links[$id]['urls'])) {
          unset($sitemap_links[$id]);
        }
      }
    }
  }
}

/**
 * Implements hook_user_login().
 */
function ymca_alters_user_login($account) {
  if (!isset($_COOKIE['ah_app_server']) && PHP_SAPI !== 'cli') {
    if ($hostname = strtok(gethostname(), '.')) {
      setcookie('ah_app_server', $hostname, time() + (365 * 24 * 60 * 60), '/');
    }
  }
}

/**
 * Implements hook_user_logout().
 */
function ymca_alters_user_logout($account) {
  if (isset($_COOKIE['ah_app_server']) && PHP_SAPI !== 'cli') {
    setcookie('ah_app_server', '', 0, '/');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ymca_alters_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_schedule_documents') {
    $node = \Drupal::routeMatch()->getParameter('node');

    $mappings = \Drupal::config('ymca_groupex.mapping')->get('locations');
    $location = FALSE;
    foreach ($mappings as $item) {
      if ($item['entity_id'] == $node->id()) {
        $location = $item['geid'];
      }
    }

    if (!$location) {
      \Drupal::logger('ymca_alters')->warning(
        'Location ID for node %node was not found',
        ['%node' => $node->id()]
      );
    }

    $variables['groupex_schedule'] = GroupexScheduleFetcher::getPdfLink($location);
  }
}

/**
 * Implements hook_shield_config_alter().
 */
function ymca_alters_shield_config_alter(&$config_name) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
  }
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.preview') {
    $node = \Drupal::routeMatch()->getParameter('node_preview');
  }
  if (isset($node)) {
    if ($node->id() == 1075) {
      $config_name = 'ymca_alters.shield';
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * @see https://github.com/enjoyiacm/unset_html_head_link/blob/master/unset_html_head_link.module
 */
function ymca_alters_entity_view_alter(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display
) {
  // Checking view_mode for node.
  if ($build['#view_mode'] === 'full' && $entity instanceof NodeInterface) {
    // Checking html_head_link on attached tags in head.
    if (!isset($build['#attached']['html_head_link'])) {
      return;
    }
    $unset_html_head_link = [
      'delete-form',
      'edit-form',
      'version-history',
      'revision',
      'devel-render',
      'devel-load',
      'token-devel'
    ];
    foreach ($build['#attached']['html_head_link'] as $key => $value) {
      if (isset($value[0]['rel']) && in_array(
          $value[0]['rel'],
          $unset_html_head_link
        )
      ) {
        unset($build['#attached']['html_head_link'][$key]);
      }
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function ymca_alters_page_attachments_alter(array &$attachments) {
  // Array to unset.
  $unset_html_head_link = [
    'delete-form',
    'edit-form',
    'version-history',
    'revision',
    'devel-render',
    'devel-load',
    'token-devel'
  ];
  // Unset loop.
  foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function ymca_alters_page_attachments(array &$page) {
  // Add canonical tag for custom routes.
  $route = \Drupal::routeMatch();
  $name = $route->getRouteName();

  $match = \Drupal::config('ymca_alters.config')->get('custom_routes_canonical');

  if (!in_array($name, $match)) {
    return;
  }

  $url = Url::fromRouteMatch($route);
  $url->setOption('absolute', TRUE);

  $canonical = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'canonical',
      'content' => $url->toString(),
    ],
  ];

  $page['#attached']['html_head'][] = [$canonical, 'canonical'];
}

/**
 * Implements hook_simple_sitemap_links_alter().
 */
function ymca_alters_simple_sitemap_links_alter(&$links) {
  $exclude = \Drupal::entityQuery('node')
    ->condition('field_sitemap_exclude', 1)
    ->execute();

  $links = array_filter($links, function($item) use ($exclude) {
    return !in_array(substr($item['path'], 5), $exclude);
  });
}
