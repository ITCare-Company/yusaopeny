<?php
/**
 * @file
 * Contiains hooks for ymca_menu module.
 */

define('YMCA_MENU_CACHE_CID', 'ymca_menu:menu');

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function ymca_menu_theme($existing, $type, $theme, $path) {
  return [
    'sidebar_navigation' => [
      'variables' => [
        'content' => NULL,
        'attributes' => NULL,
      ],
      'template' => 'sidebar-navigation',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function ymca_menu_page_attachments(array &$attachments) {
  $menus = Drupal\ymca_menu\Controller\YMCAMenuController::menuList();
  foreach ($menus as $menu) {
    /* @var Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $link */
    if ($link = \Drupal::service('menu.active_trail')->getActiveLink($menu)) {
      if (!$link->isEnabled()) {
        continue;
      }
      $connection = \Drupal\Core\Database\Database::getConnection();
      $query = $connection
        ->select('menu_tree', 'mt')
        ->condition('id', $link->getPluginId());
      $query->fields('mt', array('mlid'));
      $mlid = (int) $query->execute()->fetchField();
      break;
    }
  }
  $current_path = \Drupal::service('path.current')->getPath();
  $attachments['#attached']['drupalSettings']['page'] = array(
    'mlid' => !empty($mlid) ? $mlid : Drupal\ymca_menu\Controller\YMCAMenuController::ROOT_ID,
    'liveUrl' => \Drupal::service('path.alias_manager')->getAliasByPath($current_path) . '/',
  );
}

/**
 * Implements hook_preprocess_node().
 */
function ymca_menu_preprocess_node(&$variables) {
  $node = &$variables['node'];
  if ($variables['view_mode'] == 'full' && $node->hasField('field_sidebar_navigation') && $node->get('field_sidebar_navigation')->getValue()[0]) {
    /* var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $link */
    if ($link = \Drupal::service('menu.active_trail')->getActiveLink()) {
      $menu_name = $link->getMenuName();
      // We need custom template here to implement custom contextual links.
      $variables['sidebar_navigation'] = [
        '#theme' => 'sidebar_navigation',
        '#content' => [
          '#contextual_links' => [
            'menu' => [
              'route_parameters' => ['menu' => $menu_name],
            ],
          ],
        ],
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ymca_menu_menu_link_content_insert(Drupal\Core\Entity\EntityInterface $entity) {
  \Drupal::cache()->delete(YMCA_MENU_CACHE_CID);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ymca_menu_menu_link_content_update(Drupal\Core\Entity\EntityInterface $entity) {
  \Drupal::cache()->delete(YMCA_MENU_CACHE_CID);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function ymca_menu_menu_link_content_delete(Drupal\Core\Entity\EntityInterface $entity) {
  \Drupal::cache()->delete(YMCA_MENU_CACHE_CID);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 *
 * Adds menu item 'Exclude from nav' field to the node form.
 *
 * @see ymca_menu_form_node_form_submit()
 */
function ymca_menu_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // If menu_ui haven't altered the form, there is nothing to display.
  if (!isset($form['menu'])) {
    return;
  }
  // Generate a list of possible parents (not including this link or descendants).
  // @todo This must be handled in a #process handler.
  $node = $form_state->getFormObject()->getEntity();
  $defaults = menu_ui_get_menu_link_defaults($node);
  // If menu link item is not created, there is nothing to display.
  if (!$defaults['id']) {
    return;
  }
  /** @var \Drupal\node\NodeTypeInterface $node_type */
  $node_type = $node->type->entity;
  /** @var \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_selector */
  $menu_parent_selector = \Drupal::service('menu.parent_form_selector');
  $menu_names = menu_ui_get_menus();
  $type_menus = $node_type->getThirdPartySetting('menu_ui', 'available_menus', array('main'));
  $available_menus = array();
  foreach ($type_menus as $menu) {
    $available_menus[$menu] = $menu_names[$menu];
  }
  if ($defaults['id']) {
    $default = $defaults['menu_name'] . ':' . $defaults['parent'];
  }
  else {
    $default = $node_type->getThirdPartySetting('menu_ui', 'parent', 'main:');
  }
  $parent_element = $menu_parent_selector->parentSelectElement($default, $defaults['id'], $available_menus);
  // If no possible parent menu items were found, there is nothing to display.
  if (empty($parent_element)) {
    return;
  }

  $menu_link = MenuLinkContent::load($defaults['entity_id']);
  $form['menu']['menu_link_disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude from nav'),
    '#description' => t('Excluding page from mega nav, sidebar, sticky and mobile menus'),
    '#default_value' => !$menu_link->isEnabled(),
    '#states' => array(
      'invisible' => array(
        'input[name="menu[enabled]"]' => array('checked' => FALSE),
      ),
    ),
  );

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'ymca_menu_form_node_form_submit';
    }
  }
}

/**
 * Form submission handler for 'Exclude from nav' checkbox on the node form.
 *
 * @see ymca_menu_form_node_form_alter()
 */
function ymca_menu_form_node_form_submit($form, FormStateInterface $form_state) {
  if (!$form_state->isValueEmpty('menu')) {
    $values = $form_state->getValue('menu');
    if (!empty($values['enabled']) && trim($values['title'])) {
      /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
      if (!empty($values['entity_id'])) {
        $entity = MenuLinkContent::load($values['entity_id']);
        $entity->enabled->value = (int) (!$values['menu_link_disabled']);
        $entity->save();
      }
    }
  }
}
